#!/bin/sh
# -*- mode: shell-script -*-
#
# Control a system via amttool
#
# Parameters.  Don't quote these: the templating system will quote as needed,
# so adding quotes of our own might cause double-quoting.
# Exit code:
# 0: success
# 1: failure (might be temporary, worth retrying)
# 2: fatal failure (not worth retrying, see error message for details)
power_address={{power_address}}
power_change={{power_change}}
power_pass={{power_pass}}
ip_address={{ip_address}}
boot_mode={{boot_mode}}

# The user specified power_address overrides any automatically determined
# ip_address.
if [ -n "$power_address" ]; then
  ip_address=$power_address
fi

# boot_mode tells us whether we're pxe booting or local booting. For local
# booting, the argument to amttool must be empty (NOT 'hd', it doesn't work!).
if [ "$boot_mode" = 'local' ]; then
    amt_boot_mode=''
else
    amt_boot_mode=$boot_mode
fi


# Exit with failure message.
# Parameters: exit code, and error message.
# Fail with exit code 1 to ask for a retry, exit code 2 for a hard fail.
fail() {
    echo "$2" >&2
    exit $1
}

# XXX: bladernr 2015-02-04 bug=1331214: AMT ver > 8 needs wsman not amttool
# Check the version of AMT on node.
check_amt_version() {
    amt_version=$(issue_amt_command info 2>&1 | grep version | awk '{print $NF}')
    major_version=$(echo $amt_version | awk -F'.' '{print $1}')
    return $major_version
}


# Perform a command using amttool.
issue_amt_command() {
  LC_ALL='C' AMT_PASSWORD="$power_pass" amttool "$ip_address" "$@"
}


# Check that amttool is present.
check_amt_command() {
  command -v amttool >/dev/null 2>&1 || { fail 2 "Missing amttool (amtterm package)"; }
}


# Check that a node host has been passed.
check_bmc_host() {
  if [ -z "$ip_address" ]; then
    # This usually happens when the MAC address of the BMC is being used
    # and the ARP cache (used to find the BMC IP) isn't primed.
    # See https://bugs.launchpad.net/maas/+bug/1279460 for details.
    fail 2 "No host provided"
  fi
}


# Ask for node's power state: 'on' or 'off', via amttool.
amt_query_state() {
    # Retry the state if it fails because it often fails the first time.
    local state=
    for attempts in $(seq 0 10)
    do
        state=$(issue_amt_command info | grep '^Powerstate:' | awk '{print $2}')
        if [ -n "$state" ]
        then
            break
        fi
        # Wait 1 second between retries.  AMT controllers are generally very
        # light and may not be comfortable with more frequent queries.
        sleep 1
    done
    case "$state" in
    S[0-4])
        # Wide awake (S0), or asleep (S1-S4), but not a clean slate that
        # will lead to a fresh boot.
        echo 'on'
        ;;
    S5)
        echo 'off'
        ;;
    *)
        fail 1 "Got unknown power state from node: '$state'"
        ;;
    esac
}


# Power-cycle the machine via amttool, and boot it using the requested boot mode.
amt_restart() {
    yes | issue_amt_command powercycle "$amt_boot_mode"
}


# Power the machine on via amttool, and boot it using PXE.
amt_power_on() {
    # Try several times.  Power commands often fail the first time.
    for attempts in $(seq 0 10)
    do
        # Issue the AMT command; amttool will prompt for confirmation.
        yes | issue_amt_command powerup "$amt_boot_mode"
        if [ "$(amt_query_state)" = 'on' ]
        then
            # Success.  Machine is on.
            return 0
        fi
        sleep 1
    done
    fail 1 "Machine is not powering on.  Giving up."
}


# Power the machine off amttool.
amt_power_off() {
    # Try several times.  Power commands often fail the first time.
    for attempts in $(seq 0 10)
    do
        if [ "$(amt_query_state)" = 'off' ]
        then
            # Success.  Machine is off.
            return 0
        fi
        # Issue the AMT command; amttool will prompt for confirmation.
        yes | issue_amt_command powerdown
        sleep 1
    done
    fail 1 "Machine is not powering off.  Giving up."
}


# Check that wsman is present.
check_wsman_command() {
  command -v wsman >/dev/null 2>&1 || { fail 2 "Missing wsman (wsmancli package)"; }
}

# Issue the wsman command.
issue_wsman_command() {
    POWER_TEMPLATE_HEAD='
<p:RequestPowerStateChange_INPUT xmlns:p="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PowerManagementService">
  <p:PowerState>'
    POWER_TEMPLATE_TAIL='</p:PowerState>
  <p:ManagedElement xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
		    xmlns:wsman="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd">
    <wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
    <wsa:ReferenceParameters>
      <wsman:ResourceURI>http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem</wsman:ResourceURI>
      <wsman:SelectorSet>
        <wsman:Selector Name="CreationClassName">CIM_ComputerSystem</wsman:Selector>
        <wsman:Selector Name="Name">ManagedSystem</wsman:Selector>
      </wsman:SelectorSet>
    </wsa:ReferenceParameters>
  </p:ManagedElement>
</p:RequestPowerStateChange_INPUT>
'
    # Usage: issue_wsman_command on|off|restart|query
    ACTION="invoke -a RequestPowerStateChange"
    SCHEMA_URI='http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PowerManagementService?SystemCreationClassName="CIM_ComputerSystem",SystemName="Intel(r) AMT",CreationClassName="CIM_PowerManagementService",Name="Intel(r) AMT Power Management Service"'
    OPTS="--port 16992 --hostname $ip_address --username admin -p $power_pass -V -v"
    case $1 in
    on)
        template=${POWER_TEMPLATE_HEAD}2${POWER_TEMPLATE_TAIL}
        echo ${template} | wsman ${ACTION} "${SCHEMA_URI}" ${OPTS} -J -
        ;;
    off)
        template=${POWER_TEMPLATE_HEAD}8${POWER_TEMPLATE_TAIL}
        echo ${template} | wsman ${ACTION} "${SCHEMA_URI}" ${OPTS} -J -
        ;;
    restart)
        template=${POWER_TEMPLATE_HEAD}10${POWER_TEMPLATE_TAIL}
        echo ${template} | wsman ${ACTION} "${SCHEMA_URI}" ${OPTS} -J -
        ;;
    query)
        ACTION="enumerate"
        SCHEMA_URI='http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AssociatedPowerManagementService'
        OPTS="${OPTS} -o -j utf-8"
        wsman ${ACTION} "${SCHEMA_URI}" ${OPTS}
	;;
    *)
        fail 2 "Unknown command issued to wsman"
        ;;
    esac
}


# Ask for node's power state: 'on' or 'off', via wsman.
wsman_query_state() {
    # Retry the state if it fails because it often fails the first time.
    local state=
    for attempts in $(seq 0 10)
    do
        state=$(issue_wsman_command query | grep "h:PowerState" | awk -F [\<\>] '{print $3}')
        if [ -n "$state" ]
        then
            break
        fi
        # Wait 1 second between retries.  AMT controllers are generally very
        # light and may not be comfortable with more frequent queries.
        sleep 1
    done
    case "$state" in
    # There are a LOT of possible power states
    # 1: Other                      9: Power Cycle (Off - Hard)     
    # 2: On                         10: Master Bus Reset
    # 3: Sleep - Light              11: Diagnostic Interrupt (NMI)
    # 4: Sleep - Deep               12: Off - Soft Graceful
    # 5: Power Cycle (Off - Soft)   13: Off - Hard Graceful
    # 6: Off - Hard                 14: Master Bus Reset Graceful
    # 7: Hibernate (Off - Soft)     15: Power Cycle (Off - Soft Graceful)
    # 8: Off - Soft                 16: Power Cycle (Off - Hard Graceful
    #                               17: Diagnostic Interrupt (INIT)
    
    # These are all power states that indicate that the system is either ON or
    # will resume function in an ON or Powered Up state (e.g. being power
    # cycled currently)
    [2,3,4,5,7,9,10,14,15,16])
        echo 'on'
        ;;
    # These 4 states should leave system completely powered down
    [6,8,12,13])
        echo 'off'
        ;;
    *)
        fail 1 "Got unknown power state from node: '$state'"
        ;;
    esac
}


# Power-cycle the machine via wsman, and boot it using the requested boot mode.
wsman_restart() {
    issue_wsman_command restart
}


# Power the machine on via wsman, and boot it using PXE.
wsman_power_on() {
    # Issue the wsman command to change power state
    issue_wsman_command on
    # Check power state several times.  It usually takes a second or two to get
    # the correct state.
    for attempts in $(seq 0 10)
    do
        if [ "$(wsman_query_state)" = 'on' ]
        then
            # Success.  Machine is on.
            return 0
        fi
        sleep 1
    done
    fail 1 "Machine is not powering on.  Giving up."
}

# Power the machine off via wsman.
# Currently commented out because we need a way to power query the machines
wsman_power_off() {
    # Issue the wsman command to change power state
    issue_wsman_command off
    # Check power state several times.  It usually takes a second or two to get 
    # the correct state
    for attempts in $(seq 0 10)
    do
        if [ "$(wsman_query_state)" = 'off' ]
        then
            # Success.  Machine is off.
            return 0
        fi
        sleep 1
    done
    fail 1 "Machine is not powering off.  Giving up."
}

main() {
    check_bmc_host
    check_amt_command
    # Check AMT version
    check_amt_version
    amt_version=$?
    if [ ${amt_version} -gt 8 ]; then
	# version > 8, use wsman
	    check_wsman_command
        tool="wsman"
    else
    # Use amttool
        tool="amt"
    fi

    case "${power_change}" in
    'on')
        if [ "${tool}_query_state" = 'on' ]
        then
            # The machine is already up, so powering it up will do nothing.
            # Cycle the power instead.
            ${tool}_restart
        else
            ${tool}_power_on
        fi
        ;;
    'off')
        if [ "${tool}_query_state" != 'off' ]
        then
            ${tool}_power_off
        fi
        ;;
    'query')
        ${tool}_query_state
        ;;
    *)
        fail 1 "Unknown power command: '$1'"
    esac
}

main "$power_change"
